# Thanks again, Gary Bernhardt

function git_pretty_log {
    hash="%C(yellow)%h%C(reset)"
    who="%C(white)%an%C(reset)"
    when="%C(white)%ar%C(reset)"
    refs="%C(blue)%d%C(reset)"
    what="%s%C(reset)"

    format="$hash $refs $what $who $when"

    git log --graph --color --abbrev-commit --date=relative --pretty="tformat:${format}" $* |

        # change "minutes ago" to "minutes"
        sed -Ee 's/(seconds?|minutes?|hours?|days?|weeks?|months?|years?) ago/\1/' |

        # change "1 year, 2 months" to "1 year"
        sed -Ee 's/(years?), [[:digit:]]+ .*months?/\1/' |

        less -FXRS
}


# Modified from Gary Bernhardt's git_churn script
# https://github.com/garybernhardt/dotfiles/blob/master/bin/git-churn
#
function git_churn {
    set -e
    git log --all -M -C --name-only --format='format:' "$@" |
        sort |
        grep -v '^$' |
        uniq -c |
        sort -rg |
        awk 'BEGIN {print "COUNT\tFILE"} {printf "%5s\t%s\n", $1, $2}'
}

# Pop the last commit and reset the stage
# This will obliterate whatever you have going on, so be careful
git_pop_last_commit() {
  git reset --hard HEAD~1 && git cherry-pick HEAD@{1} -n && git reset .
}
